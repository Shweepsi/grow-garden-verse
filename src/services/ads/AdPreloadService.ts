import { AdMobSimpleService } from './AdMobSimpleService';
import { AdRetryService } from './AdRetryService';

interface PreloadState {
  isPreloading: boolean;
  lastPreloadTime: number;
  preloadSuccess: boolean;
  preloadQueue: number;
  backgroundLoadEnabled: boolean;
}

export class AdPreloadService {
  private static readonly PRELOAD_COOLDOWN = 30000; // 30 secondes entre les pr√©chargements
  private static readonly MAX_PRELOAD_QUEUE = 3; // Maximum de tentatives en queue
  
  private static state: PreloadState = {
    isPreloading: false,
    lastPreloadTime: 0,
    preloadSuccess: false,
    preloadQueue: 0,
    backgroundLoadEnabled: true
  };

  /**
   * D√©marre le pr√©chargement automatique
   */
  static startBackgroundPreloading(): void {
    if (!this.state.backgroundLoadEnabled) return;
    
    console.log('[AdPreloadService] üöÄ D√©marrage pr√©chargement automatique');
    
    // Pr√©chargement initial apr√®s 5 secondes
    setTimeout(() => {
      this.preloadIfNeeded();
    }, 5000);
    
    // Pr√©chargement p√©riodique toutes les 2 minutes
    setInterval(() => {
      this.preloadIfNeeded();
    }, 120000);
  }

  /**
   * Pr√©charge une publicit√© si n√©cessaire
   */
  static async preloadIfNeeded(): Promise<boolean> {
    const now = Date.now();
    
    // V√©rifications avant pr√©chargement
    if (this.state.isPreloading) {
      console.log('[AdPreloadService] ‚è≥ Pr√©chargement d√©j√† en cours');
      return false;
    }
    
    if (now - this.state.lastPreloadTime < this.PRELOAD_COOLDOWN) {
      console.log('[AdPreloadService] ‚è±Ô∏è Cooldown pr√©chargement actif');
      return false;
    }
    
    if (this.state.preloadQueue >= this.MAX_PRELOAD_QUEUE) {
      console.log('[AdPreloadService] üìà Queue pr√©chargement pleine');
      return false;
    }
    
    // V√©rifier si une pub est d√©j√† charg√©e
    const adState = AdMobSimpleService.getState();
    if (adState.isAdLoaded) {
      console.log('[AdPreloadService] ‚úÖ Publicit√© d√©j√† charg√©e');
      return true;
    }
    
    return this.executePreload();
  }

  /**
   * Force le pr√©chargement
   */
  static async forcePreload(): Promise<boolean> {
    console.log('[AdPreloadService] üîÑ Pr√©chargement forc√©');
    return this.executePreload();
  }

  /**
   * Ex√©cute le pr√©chargement
   */
  private static async executePreload(): Promise<boolean> {
    this.state.isPreloading = true;
    this.state.preloadQueue++;
    this.state.lastPreloadTime = Date.now();
    
    try {
      console.log('[AdPreloadService] üì• D√©but pr√©chargement...');
      
      const success = await AdRetryService.preloadAd(() => AdMobSimpleService.loadAd());
      
      this.state.preloadSuccess = success;
      
      if (success) {
        console.log('[AdPreloadService] ‚úÖ Pr√©chargement r√©ussi');
      } else {
        console.warn('[AdPreloadService] ‚ùå Pr√©chargement √©chou√©');
      }
      
      return success;
    } catch (error) {
      console.error('[AdPreloadService] üí• Erreur pr√©chargement:', error);
      this.state.preloadSuccess = false;
      return false;
    } finally {
      this.state.isPreloading = false;
      this.state.preloadQueue = Math.max(0, this.state.preloadQueue - 1);
    }
  }

  /**
   * Planifie un pr√©chargement apr√®s affichage d'une pub
   */
  static scheduleNextPreload(delayMs: number = 5000): void {
    if (!this.state.backgroundLoadEnabled) return;
    
    console.log(`[AdPreloadService] üìÖ Pr√©chargement planifi√© dans ${delayMs}ms`);
    
    setTimeout(() => {
      this.preloadIfNeeded();
    }, delayMs);
  }

  /**
   * Active/d√©sactive le pr√©chargement automatique
   */
  static setBackgroundLoadEnabled(enabled: boolean): void {
    this.state.backgroundLoadEnabled = enabled;
    console.log(`[AdPreloadService] üîß Pr√©chargement automatique ${enabled ? 'activ√©' : 'd√©sactiv√©'}`);
  }

  /**
   * Optimise les param√®tres de pr√©chargement selon la performance
   */
  static optimizeBasedOnPerformance(successRate: number): void {
    if (successRate < 0.3) {
      // Performance faible - r√©duire la fr√©quence
      this.setBackgroundLoadEnabled(false);
      console.log('[AdPreloadService] ‚ö†Ô∏è Performance faible - pr√©chargement d√©sactiv√©');
    } else if (successRate > 0.8) {
      // Bonne performance - pr√©chargement plus agressif
      this.setBackgroundLoadEnabled(true);
      console.log('[AdPreloadService] üöÄ Bonne performance - pr√©chargement optimis√©');
    }
  }

  /**
   * Statistiques du pr√©chargement
   */
  static getStats() {
    return {
      isPreloading: this.state.isPreloading,
      lastPreloadTime: this.state.lastPreloadTime,
      preloadSuccess: this.state.preloadSuccess,
      preloadQueue: this.state.preloadQueue,
      backgroundLoadEnabled: this.state.backgroundLoadEnabled,
      timeSinceLastPreload: this.state.lastPreloadTime 
        ? Date.now() - this.state.lastPreloadTime 
        : null
    };
  }

  /**
   * Reset des statistiques
   */
  static resetStats(): void {
    this.state.preloadQueue = 0;
    this.state.preloadSuccess = false;
    this.state.lastPreloadTime = 0;
  }
}